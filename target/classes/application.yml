logging:
  level:
    root: INFO
    org.hibernate.engine.jdbc.spi.SqlExceptionHelper: WARN
    org.hibernate.dialect.function.TemplateRenderer: ERROR

server:
  port: 8080
  shutdown: graceful
  servlet:
    context-path: ${SERVER_SERVLET_CONTEXT_PATH:/game/freya}
  compression:
    enabled: true
  error:
    whitelabel:
      enabled: false

spring:
  main:
    allow-circular-references: false
    lazy-initialization: false
    allow-bean-definition-overriding: false

  application:
    name: FreyaTheGame
    version: 0.0.1

  profiles:
    default: dev
    group:
      dev: dev
      prod: prod

  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:6039}/${DB_NAME:freya_db}
    username: ${DB_LOGIN:freya}
    password: ${DB_PASSWORD:0358}
    driver-class-name: org.postgresql.Driver
    hikari:
      poolName: Hikari
      auto-commit: false

      # Максимальное количество миллисекунд, в течение которых клиент (то есть вы) будет ожидать соединения из пула.
      #   Если это время превышено, а соединение не становится доступным, будет выдано исключение SQLException.
      #   Минимально допустимое время ожидания соединения составляет 250 мс. По умолчанию: 30000 (30 секунд)
      connection-timeout: 45000

      # Максимальное время, в течение которого соединению разрешено простаивать в пуле.
      #   Применяется если minimumIdle меньше maximumPoolSize. Неактивные соединения не будут удалены после того,
      #   как пул достигнет minimumIdle соединений. Независимо от того, будет ли соединение отключено как бездействующее
      #   или нет, максимальное отклонение составит +30 секунд, а среднее отклонение составит +15 секунд.
      #   Соединение никогда не будет отключено как бездействующее до истечения этого таймаута.
      #   Значение 0 означает, что простаивающие соединения никогда не удаляются из пула.
      #   Минимально допустимое значение — 10000 мс (10 секунд). По умолчанию: 600000 (10 минут).
      idle-timeout: 600000

      # Максимальный размер пула, включая как простаивающие, так и используемые соединения.
      #   По сути, это значение будет определять максимальное количество фактических подключений к базе данных.
      #   Разумное значение этого параметра лучше всего определяется вашей средой выполнения.
      #   Когда пул достигнет этого размера и не будет свободных соединений, вызовы getConnection()
      #   будут блокироваться на срок до connection-timeout, прежде чем истечет время ожидания.
      maximum-pool-size: 15

      # Максимальное время жизни соединения в пуле. Используемое соединение будет удалено только когда будет закрыто.
      #   Для каждого соединения применяется незначительное отрицательное затухание, чтобы избежать массового затухания в пуле.
      #   Должно быть на несколько секунд короче, чем ограничение времени подключения, установленное любой БД.
      max-lifetime: 900000

      # Как часто HikariCP будет пытаться поддерживать соединение, чтобы предотвратить
      #   его тайм-аут из-за базы данных или сетевой инфраструктуры. Это значение должно быть меньше max-lifetime:
      keepalive-time: 180000

#  liquibase:
#    change-log: classpath:db/changelog/changelog.xml
#    # drop-first: true

  jpa:
    hibernate:
      ddl-auto: update
    open-in-view: false
    show-sql: false
    properties:
      hibernate:
        check_nullability: true
        jdbc:
          # Hibernate прозрачно отключает пакетную вставку на уровне JDBC, если вы используете генератор IDENTITY
          batch_size: 10
          batch_versioned_data: true
        order_updates: true
        connection:
          autocommit: false
          pool_size: 12
        dialect: org.hibernate.dialect.PostgreSQL10Dialect

app:
  notifyUrl: ${NOTIFY_SERVICE_URL:https://api-docs.dev01.russpass.dev/business/notification/send}
  crmUrl: ${CRM_URL:https://b24-crm7.tesa-it.ru/business}
  crmToken: ${CRM_TOKEN:7d5cecf7-e91c-4424-9bc9-c062eeb42259}

  partnersListUrl: ${PARTNERS_LIST_SERVICE_URL:https://api-docs.dev01.russpass.dev/business/partners/partners_list}
  storageUrl: ${PARTNER_STORAGE_SERVICE_URL:https://api-docs.dev01.russpass.dev/business/partners/file}
  authServiceUrl: ${GET_DATA_FROM_NOTIFY_URL:https://api-docs.dev01.russpass.dev/business/partners/get-notification-data}
  fullPartnerDataUrl: ${GET_FULL_PARTNER_DATA_URL:https://api-docs.dev01.russpass.dev/business/partners/info}
  manageReaderRoleUrl: ${MANAGE_READER_ROLE_URL:https://api-docs.dev01.russpass.dev/business/partners/manage_survey_reader_role}
  checkReadRoleUrl: ${CHECK_READ_ROLE_URL:https://api-docs.dev01.russpass.dev/business/partners/check_read_survey}
  checkManageRoleUrl: ${CHECK_MANAGE_ROLE_URL:https://api-docs.dev01.russpass.dev/business/partners/check_create_survey}
  checkModerateRoleUrl: ${CHECK_MODERATE_ROLE_URL:https://api-docs.dev01.russpass.dev/business/partners/check_moderate_survey}

  eventsServiceUrl: ${EVENTS_SERVICE_URL:https://api-docs.dev01.russpass.dev/business/events}

#springdoc:
#  api-docs:
#    enabled: true
#  swagger-ui:
#    enabled: true
#    disable-swagger-default-url: true
#    config-url: "${API_DOCS_MAIN_URI:${server.servlet.context-path:}}/v3/api-docs/swagger-config"
#    url: "${API_DOCS_MAIN_URI:${server.servlet.context-path:}}/v3/api-docs"

#management:
#  endpoint:
#    health:
#      probes:
#        enabled: true
